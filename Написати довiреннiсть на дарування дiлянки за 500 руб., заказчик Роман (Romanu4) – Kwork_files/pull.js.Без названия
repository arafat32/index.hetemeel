var PULL_EVENT_NOTIFY = 'notify';
var PULL_EVENT_DISCONNECT = 'disconnect';
var PULL_EVENT_NEW_INBOX = 'new_inbox';
var PULL_EVENT_READ_INBOX = 'read_inbox';
var PULL_EVENT_UNREAD_INBOX = 'unread_inbox';
var PULL_EVENT_POP_UP_NOTIFY = 'pop_up_notify';
var PULL_EVENT_PORTFOLIO_VIDEO_THUMBNAIL_READY = 'portfolio_video_thumbnail_ready';
var PULL_EVENT_EDIT_POP_UP_NOTIFY = 'edit_pop_up_notify';
var PULL_INBOX_HIDE_DIALOG = 'inbox_hide_dialog';
var PULL_EVENT_REMOVE_POP_UP_NOTIFY = 'remove_pop_up_notify';
var PULL_EVENT_IS_ONLINE = 'is_online';
var PULL_EVENT_UPDATE_CART = 'update_cart';
var PULL_EVENT_INBOX_MESSAGE_EDIT = 'inbox_message_edit';
var PULL_EVENT_INBOX_MESSAGE_DELETE = 'inbox_message_delete';
var PULL_EVENT_NEW_ORDER_TRACK = 'new_order_track';
var PULL_EVENT_REFRESH_TRACK = 'refresh_track';
var PULL_EVENT_KWORK_ACCEPT_PORTFOLIO = 'kwork_accept_portfolio';// отправлено разрешение покупателя добавлять портфолио
var PULL_EVENT_REMOVE_DRAFT = 'remove_draft';
var PULL_EVENT_READ_TRACK = 'read_track';
var PULL_EVENT_ORDER_UPDATED = 'order_updated';
var PULL_EVENT_TRACK_CHANGED = 'track_changed';
var PULL_EVENT_IS_TYPING = 'is_typing';
var PULL_EVENT_DIALOG_CREATED = 'dialog_created';
var PULL_EVENT_DIALOG_UPDATED = 'dialog_updated';
var PULL_EVENT_DIALOG_REMOVED = 'dialog_removed';
var PULL_EVENT_DIALOG_IN_SPAM = 'dialog_in_spam';
var PULL_EVENT_INBOX_SENT = 'inbox_sent';
var PULL_EVENT_FILE_MINIATURE_CREATED = 'file_miniature_created';
var PULL_EVENT_MESSAGE_SUBMIT_MODE_CHANGED = 'message_submit_mode_changed';
var PULL_EVENT_WORKER_CHANGE_STATUS = 'worker_change_status';
var PULL_EVENT_ACCOUNT_DELETED = 'account_deleted';
var PULL_EVENT_USER_SUGGEST_PHONE_VERIFICATION = 'user_suggest_phone_verification';
var PULL_EVENT_CONVERSATION_FILE_CONTAINER_UPDATED = 'conversation_file_container_updated';
var PULL_EVENT_TRACK_FILE_CONTAINER_UPDATED = 'track_file_container_updated';
var PULL_EVENT_QUALIFICATION_STATUS_CHANGE = 'qualification_status_change';
var PULL_EVENT_NOTIFICATION_IS_CREATED = 'notification_is_created';
var PULL_EVENT_QUALIFICATION_UPDATED = 'qualification_updated';
var PULL_EVENT_QUALIFICATION_CERTIFICATE_CREATED = 'qualification_certificate_created';
var PULL_EVENT_QUALIFICATION_MODER_UNBINDED = 'qualification_moder_unbinded';
var PULL_EVENT_UPDATE_BALANCE = 'user_funds_updated';
var PULL_EVENT_ACTIVE_ORDERS_COUNT_CHANGED = 'active_orders_count_changed';
var PULL_EVENT_ACTIVE_WANTS_COUNT_CHANGED = 'active_wants_count_changed';
var PULL_EVENT_WITHDRAW_STATUS_CHANGE = 'withdraw_status_change'; // заблокирована/разблокирована возможность вывода денег
var PULL_EVENT_UNREAD_TRACKS_COUNT_CHANGED = 'unread_tracks_count_changed';
var EMAIL_VERIFIED = 'email_verified';
var SUMSUB_COMPLETED = 'sumsub_completed';
var IMAGE_COMMENT = 'image_comment';

/**
 * @module
 *
 * @type {{start, on, onPub, off, extendWatch, connect, disconnect, addOnlineUserChannel}}
 */
var PullModule = (function (document, window) {
	var LOCAL_STORAGE_KEY = 'pull-channel';

	var FORCE_DATA_UPDATE_KEY = 'force-data-update';

	var USER_ONLINE_CHANNEL_PREFIX = 'online_user_';

	var EXPIRE_MINUTES = 30;

	var _options;
	var restoreTimeoutId = null;

	/**
	 * ID таймаут для обновления срока работы канала
	 * @type {number}
	 * @private
	 */
	var _expireDateTimeout = 0;

	/**
	 *
	 * @param {PushStream}
	 * @private
	 */
	var _pushStream;

	/**
	 * Имена пользовательских каналов
	 * @type {object}
	 * @private
	 */
	var _onlineUserChannels = {};

	/**
	 * Получить случайный таймаут из диапазона
	 *
	 * @param min Минимальное значение диапазона
	 * @param max Максимальное значение диапазона
	 * @returns {Number}
	 * @private
	 */
	var _getRandomTimeout = function (min, max) {
		return Math.floor(Math.random() * (max - min + 1) + min);
	};

	/**
	 * Запуск запроса на принудительное обновление данных
	 *
	 * @param delay Задержка перед вызовом. Если указана, то запланированный запуск будет отменен.
	 *              Если задержка не указана, то будет выбрано случайное значение в диапазоне от 10 до 60 сек.
	 * @private
	 */
	var _forceDataUpdate = function (delay) {
		if (delay) {
			_stopDataUpdate();
		}

		if (!restoreTimeoutId && _isCanUpdateData()) {
			var timeout = delay || _getRandomTimeout(10000, 60000);

			restoreTimeoutId = setTimeout(function () {
				localStorage.setItem(FORCE_DATA_UPDATE_KEY, Date.now().toString());

				deferScript('vueBootstrap', function () {
					//todoFlant
					//window.bus.$emit('pushsteam-connection-restore');
				}, window.defferVuePages);

				restoreTimeoutId = null;
			}, timeout);
		}
	};

	/**
	 * Остановка запроса на обновление данных
	 *
	 * @private
	 */
	var _stopDataUpdate = function () {
		if (restoreTimeoutId) {
			clearTimeout(restoreTimeoutId);
			restoreTimeoutId = null;
		}
	};

	/**
	 * Получить признак принудительного обновления данных
	 *
	 * @returns {boolean}
	 * @private
	 */
	var _isCanUpdateData = function () {
		var passedTime = Date.now() - Number(localStorage.getItem(FORCE_DATA_UPDATE_KEY));
		return passedTime > 15000;
	};

	var _initPushStreamModule = function () {
		_pushStream = new PushStream({
			host: _options.host,
			port: window.location.port,
			modes: 'websocket|longpolling',
			useSSL: window.location.protocol === 'https:',
			onmessage: _onPushStreamReceived,
			onopen: function () {
				_forceDataUpdate();
			},
			reconnectOnTimeoutInterval: 15000,
			reconnectOnChannelUnavailableInterval: 15000,
		});

		window.addEventListener('focus', function () {
			if (_pushStream.readyState !== PushStream.OPEN) {
				_forceDataUpdate(2000);
			}
		});

		_pushStream.addChannel('public');
		_pushStream.addChannel(_options.channelId);
		_connect();
	};

	/**
	 * Инициализация модуля
	 *
	 * @param {Object} options
	 * @param {string} options.host         Хост
	 * @param {string} options.channelId    ID канала
	 *
	 * @private
	 */
	var _start = function (options) {
		_options = options;

		if (!_options.channelId.length) {
			return false;
		}

		_initPushStreamModule();

		_updateStorageChannelId(_options.channelId);
		_setEvents();
	};

	/**
	 * Включить связь с сервером
	 * @private
	 */
	var _connect = function () {
		_pushStream.connect();
	};
	var _disconnect = function () {
		_pushStream.disconnect();
		clearTimeout(_expireDateTimeout);
	};

	/**
	 * Установка базовых событий
	 *
	 * @private
	 */
	var _setEvents = function () {
		$(window).on('storage', function (event) {
			switch (event.originalEvent.key) {
				case LOCAL_STORAGE_KEY:
					var channelData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));
					_setNewChannel(channelData.channel);
					break;
				case FORCE_DATA_UPDATE_KEY:
					_stopDataUpdate();
					break;
				default:
			}
		});

		_on(PULL_EVENT_DISCONNECT, function () {
			_disconnect();
		});
	};

	/**
	 * Получение данных из стрима (COMET)
	 *
	 * @param {String} response
	 * @param id
	 * @param channel
	 * @private
	 */
	var _onPushStreamReceived = function (response, id, channel) {
		/**
		 * @param {Object} responseJson
		 * @param {String} responseJson.event
		 * @param {*} responseJson.data
		 *
		 */
		var responseJson = JSON.parse(response);
		_emit(responseJson.event, responseJson.data, channel === 'public');
	};

	/**
	 * Повесить обработчик на событие
	 *
	 * @param {String} eventName название события
	 * @param {Object} callback
	 *
	 * @private
	 */
	var _on = function (eventName, callback) {
		$(document).bind(_generateEventName(eventName), function (e) {
			var args = [];
			Array.prototype.push.apply(args, arguments);
			args.shift();
			callback.apply(document, args);
		});
	};

	var _onPublic = function (eventName, callback) {
		$(document).bind(_generateEventName(eventName, true), callback);
	};

	/**
	 * Удалить подписку на событие
	 *
	 * @param {String} eventName название события
	 * @param {Object} callback
	 * @param {boolean} [isPublic] публичный канал
	 *
	 * @private
	 */
	var _off = function (eventName, callback, isPublic) {
		$(document).unbind(_generateEventName(eventName, isPublic), callback);
	};

	/**
	 * Затриггерить событие
	 *
	 * @param {String} eventName название события
	 * @param {*} params параметры события
	 * @param {boolean} [isPublic] публичный канал
	 *
	 * @private
	 */
	var _emit = function (eventName, params, isPublic) {
		$(document).trigger(_generateEventName(eventName, isPublic), params);
	};

	/**
	 * Сгенерировать имя события для пуш-уведомлений
	 *
	 * @param {String} eventName название события
	 * @param {boolean} [isPub] публичный канал
	 * @returns {string}
	 *
	 * @private
	 */
	var _generateEventName = function (eventName, isPub) {
		if (isPub) {
			return eventName + '.pub.pull';
		}

		return eventName + '.pull';
	};

	/**
	 * Обновить канал
	 * @param channelId
	 * @private
	 */
	var _updateStorageChannelId = function (channelId) {
		var now = new Date();
		now.setMinutes(now.getMinutes() + EXPIRE_MINUTES);

		var data = {
			channel: channelId,
			expired: now.getTime(),
		};

		localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));

		_setNewChannel(data.channel);
	};

	/**
	 * установить канал
	 *
	 * @param channelId
	 * @private
	 */
	var _setNewChannel = function (channelId) {
		if (_options.channelId === channelId) {
			return;
		}

		if (_options.channelId) {
			_pushStream.removeChannel(_options.channelId);
		}

		_options.channelId = channelId;
		_pushStream.addChannel(_options.channelId);
	};

	var addOnlineUserChannel = function (userId) {
		userId = userId ^ 0;
		var channelId = USER_ONLINE_CHANNEL_PREFIX + userId;

		if (_onlineUserChannels[channelId]) {
			return;
		}

		_pushStream.addChannel(channelId);
		_onlineUserChannels[channelId] = true;
	};

	var _removeOnlineUserChannel = function (userId) {
		if (!userId) {
			return false;
		}
		var channelId = USER_ONLINE_CHANNEL_PREFIX + userId;
		_onlineUserChannels[channelId] = false;
		_pushStream.removeChannel(channelId);
	};

	return {
		start: _start,
		on: _on,
		onPub: _onPublic,
		off: _off,
		connect: _connect,
		disconnect: _disconnect,
		addOnlineUserChannel: addOnlineUserChannel,
		removeOnlineUserChannel: _removeOnlineUserChannel,
	};
}(document, window));
